@import "_variables.scss";

// flex
@mixin flex($justify-content: space-between, $wrap: nowrap) {
	display: flex;
	justify-content: $justify-content;
	flex-wrap: $wrap;
}

// font size px to rem
@function decimal-round($number, $digits: 0, $mode: round) {
	$n: 1;

	// $number must be a number
	@if type-of($number) !=number {
		@warn '#{ $number } is not a number.';
		@return $number;
	}

	// $digits must be a unitless number
	@if type-of($digits) !=number {
		@warn '#{ $digits } is not a number.';
		@return $number;
	}

	@else if not unitless($digits) {
		@warn '#{ $digits } has a unit.';
		@return $number;
	}

	@for $i from 1 through $digits {
		$n: $n * 10;
	}

	@if $mode==round {
		@return round($number * $n) / $n;
	}

	@else if $mode==ceil {
		@return ceil($number * $n) / $n;
	}

	@else if $mode==floor {
		@return floor($number * $n) / $n;
	}

	@else {
		@warn '#{ $mode } is undefined keyword.';
		@return $number;
	}
}

@function decimal-floor($number, $digits: 2) {
	@return decimal-round($number, $digits, ceil);
}

@function calRem($size) {
	$remSize: decimal-floor($size / $root_font_size);
	@return #{$remSize}rem;
}

@function calRem16($size) {
	$remSize: decimal-floor($size / 16px);
	@return #{$remSize}rem;
}

@function calculateEm($size) {
	$remSize: decimal-floor($size / $root_font_size);
	@return #{$remSize}em;
}

@mixin fsRem($size) {
	@if $size < $min_font_size {
		font-size: $min_font_size;
		font-size: calRem($min_font_size);
	}

	@else {
		font-size: $size;
		font-size: calRem($size);
	}
}

@mixin fsEm($size) {
	@if $size < $min_font_size {
		font-size: $min_font_size; //Fallback in px
		font-size: calculateEm($min_font_size);
	}

	@else {
		font-size: $size; //Fallback in px
		font-size: calculateEm($size);
	}
}

// responsive
@mixin md {
	@media screen and (max-width: 600px) {
		@content;
	}
}

@mixin md-s {
	@media screen and (max-width: 370px) {
		@content;
	}
}

@mixin mdh-s {
	@media screen and (max-height: 595px) {
		@content;
	}
}

@mixin md_min {
	@media screen and (min-width: 601px) {
		@content;
	}
}

//font style
@mixin gothic() {
	font-family: "Hiragino Kaku Gothic Pro", "メイリオ", "Meiryo", "ＭＳ Ｐゴシック", Osaka, sans-serif;
}

//font style
@mixin mincho() {
	font-family: 游明朝, "Yu Mincho", YuMincho, "Hiragino Mincho ProN", "Hiragino Mincho Pro", HGS明朝E, メイリオ, Meiryo, serif;
}

//position center
@mixin absoluteCenter() {
	position: absolute;
	top: 50%;
	left: 50%;
	transform: translate(-50%, -50%);
}

@mixin sp-font($point) {
	font-size: calc($point + 3vw);
}

/// Mixin to place items on a circle
/// @author Hugo Giraudel
/// @author Ana Tudor
/// @param {Integer} $item-count - Number of items on the circle
/// @param {Length} $circle-size - Large circle size
/// @param {Length} $item-size - Single item size
@mixin on-circle($item-count, $circle-size, $item-size) {
	position: relative;
	width: $circle-size;
	height: $circle-size;
	padding: 0;
	border-radius: 50%;
	list-style: none;

	>li {
		display: block;
		position: absolute;
		top: 50%;
		left: 50%;
		width: $item-size;
		height: $item-size;
		margin: -($item-size / 2);
		$angle: (360 / $item-count);
		$rot: -90;

		@for $i from 1 through $item-count {
			&:nth-of-type(#{$i}) {
				transform: rotate($rot * 1deg) translate($circle-size / 2) rotate($rot * -1deg);
			}

			$rot: $rot+$angle;
		}
	}
}

@mixin marginBottom($size) {
	margin-bottom: decimal-floor($size / 16 * 1rem);
}

@mixin paddingBottom($size) {
	padding-bottom: decimal-floor($size / 16 * 1rem);
}

@mixin fontSizeVw($size) {
	font-size: $size * 0.25 * 1vw;
}

@function getSpPercent($value) {
	@return decimal-floor($value * 100 / 375) * 1%;
}

@function getSpVw($value) {
	@return decimal-floor($value * 100 / 375) * 1vw;
}

@mixin retina_back {

	@media only screen and (-webkit-min-device-pixel-ratio: 2),
	only screen and (min--moz-device-pixel-ratio: 2),
	only screen and (-o-min-device-pixel-ratio: 2/1),
	only screen and (min-device-pixel-ratio: 2),
	only screen and (min-resolution: 192dpi),
	only screen and (min-resolution: 2dppx) {
		@content;
	}
}

@mixin lineHeightCrop($line-height) {
	&::before {
		display: block;
		width: 0;
		height: 0;
		margin-top: calc((1 - #{$line-height}) * .5em);
		content: "";
	}

	&::after {
		display: block;
		width: 0;
		height: 0;
		margin-bottom: calc((1 - #{$line-height}) * .5em);
		content: "";
	}
}